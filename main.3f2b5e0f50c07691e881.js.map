{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","canProcess","logSuccess","id","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACfD,EAASF,KACVA,OAIGI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCXXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAE/B,OAAO,IAAIb,SAAQ,SAACC,GAIhBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAOnEZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCvBnC,IAIMe,EAAkB,SAACC,GACvB,IALiCC,EAAKC,EAKhCvB,GAL2BsB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAK9CK,EAAaH,KAAKE,SAAW,GAEnC,OAAO,IAAIxB,SAAQ,WAEfE,YAAW,WAEPuB,EACDC,EAAWP,EAAYQ,GAAI7B,GAG5B8B,EAAST,EAAYQ,MAEpB7B,OAOH4B,EAAa,SAACC,EAAIvB,GACtBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,QAGIwB,EAAW,SAAAD,GACftB,QAAQwB,KAAR,gCAA6CF,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAIG,OAAQ,MAC/BvB,KAAKmB,GACLK,MAAMH,GAERV,EAAgB,CAAES,GAAI,GAAIG,OAAQ,MAChCvB,KAAKmB,GACLK,MAAMH,GAETV,EAAgB,CAAES,GAAI,GAAIG,OAAQ,KAC9BvB,KAAKmB,GACLK,MAAMH,GAEVV,EAAgB,CAAES,GAAI,GAAIG,OAAQ,MAC7BvB,KAAKmB,GACLK,MAAMH,K","file":"main.3f2b5e0f50c07691e881.js","sourcesContent":["const delay = ms => {\r\n    return new Promise((resolve) => { \r\n        setTimeout(() => {\r\n    resolve (ms)\r\n}, ms)\r\n    })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n\r\n    return new Promise((resolve) => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n        )\r\n        resolve(updatedUsers)\r\n    }\r\n)\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  const canProcess = Math.random() > 0.3;\r\n\r\n  return new Promise(() => {\r\n      \r\n      setTimeout(() => {\r\n      \r\n      if (canProcess) {\r\n         logSuccess(transaction.id, delay)\r\n      }\r\n      else {\r\n        logError(transaction.id)\r\n      }\r\n      }, delay);  \r\n   \r\n    }\r\n    )\r\n\r\n};\r\n\r\nconst logSuccess = (id, time ) => {\r\n  console.log(`Transaction ${id} processed in ${time} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n makeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n   .then(logSuccess)\r\n   .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}